# This file is part of the Gryla project
# Copyright (C) 2025 - PsychedelicPalimpsest
#
# You are free to copy, redistribute, and/or modify this file
# under the terms of the CC BY-SA 4.0 license, as published by
# Creative Commons, either version 4.0 of the License, or (at
# your option) any later version.
#
# This file is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty
# of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
# See the CC BY-SA 4.0 license for more details.
#
# You should have received a copy of the CC BY-SA 4.0 license
# along with this file. If not, see <https://creativecommons.org/licenses/by-sa/4.0/>.





# The proto file format is a relatively simple DSL designed for use in defining the schema 
# for Minecraft packets. It is in NO WAY official, or connected with Mojang. It is of my own creation.




# In lists, dictionaries, and parameters, commas are mandatory! With trailing commas being ignored
# Note that this is very much a markup language, you cannot write executable code or define variables.






# The following is an example of all the features of the format:


# Comments start with a pound
# By default, we are inside of a list type element. (Referred to as root list)


# Numbers
5,

# Lowercase style booleans
true, false,

## Hex numbers
0xDEADbeef,

# Floats
69.420,


# Strings
"Some complex string \"with escapes\"",

"Multi line strings too! \
Note: This is C style, so \n's are needed \
to add newlines. \
"




# But most things will be inside of Object

DataType(
  # Which support parameters
  1, 2, 3, 4



  # Including all valid datatypes

  false, 1.0,

  
  # Not all datatypes use normal parenthesis
  Nested{
    "some use": "dicts",
    # Legally, datatypes do not need any parameters
    # this is equivlent to Foo(): Bar() 
    Foo: Bar
  }[
    "A function can even have many attached typed param styles"
  ]

),



# It should be noted that in this repos use case there will be MANY
# kinds of datatype, each with their own calling conventions.


# Here are some examples of packet definitions 

Status {
  Clientbound : {
    0x00 : Packet("status_response")[
              String("JSON Response")
            ],
    0x01 : Packet("pong_response")[
              Long("Timestamp")
            ]
   },
  Serverbound: {
    # ...
  }
},


# Here is a more complex packet

Login {
  Clientbound : {
    0x02 : Packet("login_finished") [
            UUID("UUID"),
            String("Username")
            PrefixedArray("Properties")[
                String("Name"),
                String("Value"),
                
                # Note here that instead of an attached array we are providing a field as
                # the first parameter. 
                PrefixedOptional( String("Signature") )


            ]


    ]


  }

}

















